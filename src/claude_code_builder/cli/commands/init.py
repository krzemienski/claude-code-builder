"""Init command implementation."""

from pathlib import Path
from typing import Optional

from rich.console import Console
from rich.prompt import Prompt

console = Console()


async def init_command(
    project_dir: Path,
    template: str = "standard",
    name: Optional[str] = None,
    project_type: Optional[str] = None,
) -> None:
    """Initialize a new Claude Code Builder project."""
    console.print(f"\n[cyan]Initializing new project in: {project_dir}[/cyan]\n")
    
    # Get project details
    if not name:
        name = Prompt.ask("Project name", default=project_dir.name)
    
    if not project_type:
        project_type = Prompt.ask(
            "Project type",
            choices=["cli", "api", "web", "library", "fullstack"],
            default="cli",
        )
    
    # Create project directory
    project_dir.mkdir(parents=True, exist_ok=True)
    
    # Generate specification template
    spec_content = generate_spec_template(name, project_type, template)
    
    # Write specification file
    spec_file = project_dir / f"{name.lower().replace(' ', '-')}-spec.md"
    spec_file.write_text(spec_content)
    
    # Create .claude-code-builder.json
    config = {
        "version": "1.0.0",
        "project_name": name,
        "project_type": project_type,
        "template": template,
    }
    
    config_file = project_dir / ".claude-code-builder.json"
    import json
    config_file.write_text(json.dumps(config, indent=2))
    
    # Create README
    readme = f"""# {name}

This project will be built using Claude Code Builder.

## Getting Started

1. Review and edit the specification file: `{spec_file.name}`
2. Build the project: `claude-code-builder build {spec_file.name}`

## Project Type

{project_type.title()} Application

---
Generated by Claude Code Builder
"""
    
    readme_file = project_dir / "README.md"
    readme_file.write_text(readme)
    
    console.print(f"[green]âœ“ Project initialized successfully![/green]")
    console.print(f"\nCreated files:")
    console.print(f"  - {spec_file.name} (specification)")
    console.print(f"  - {config_file.name} (configuration)")
    console.print(f"  - {readme_file.name} (documentation)")
    console.print(f"\n[bold]Next steps:[/bold]")
    console.print(f"  1. Edit {spec_file.name} to define your project")
    console.print(f"  2. Run: claude-code-builder build {spec_file.name}")


def generate_spec_template(name: str, project_type: str, template: str) -> str:
    """Generate specification template."""
    if template == "minimal":
        return f"""# {name}

## Overview

TODO: Describe what this {project_type} application does.

## Requirements

- TODO: List functional requirements
- TODO: List non-functional requirements

## Technology Stack

- Language: Python 3.11+
- Type: {project_type}

## Success Criteria

- TODO: Define what success looks like
"""
    
    elif template == "advanced":
        return f"""# {name}

## Executive Summary

TODO: Provide a high-level overview of the project.

## Project Objectives

1. TODO: Primary objective
2. TODO: Secondary objectives

## Functional Requirements

### Core Features
- TODO: List core features

### User Stories
- As a [user type], I want to [action] so that [benefit]

## Non-Functional Requirements

### Performance
- TODO: Response time requirements
- TODO: Throughput requirements

### Security
- TODO: Authentication requirements
- TODO: Data protection requirements

### Scalability
- TODO: Expected user load
- TODO: Growth projections

## Technical Architecture

### Technology Stack
- Language: Python 3.11+
- Framework: TODO
- Database: TODO
- Deployment: TODO

### System Architecture
TODO: Describe the overall architecture

### API Design
TODO: Define API endpoints and contracts

## Data Model

TODO: Define data structures and relationships

## Testing Strategy

- Unit Testing: pytest
- Integration Testing: TODO
- Performance Testing: TODO

## Deployment

TODO: Describe deployment process and infrastructure

## Success Criteria

- TODO: Measurable success metrics
- TODO: Acceptance criteria

## Constraints and Assumptions

### Constraints
- TODO: Technical constraints
- TODO: Business constraints

### Assumptions
- TODO: List assumptions
"""
    
    else:  # standard
        return f"""# {name}

## Overview

TODO: Provide a clear description of what this {project_type} application does and its primary purpose.

## Objectives

1. TODO: Primary objective
2. TODO: Secondary objectives

## Requirements

### Functional Requirements
- TODO: User authentication and authorization
- TODO: Core business logic
- TODO: Data management
- TODO: External integrations

### Non-Functional Requirements
- Performance: TODO: Define performance targets
- Security: TODO: Security requirements
- Usability: TODO: User experience requirements
- Reliability: TODO: Uptime and reliability targets

## Technology Stack

- Language: Python 3.11+
- Framework: TODO: Specify framework (e.g., FastAPI, Django, Flask)
- Database: TODO: Specify database (e.g., PostgreSQL, MongoDB)
- Testing: pytest
- Documentation: TODO: Documentation approach

## Architecture

TODO: Describe the high-level architecture, including:
- Component structure
- Data flow
- External dependencies
- API design (if applicable)

## Implementation Details

TODO: Provide specific implementation requirements:
- Coding standards
- Error handling approach
- Logging requirements
- Configuration management

## Testing Requirements

- Unit test coverage: Minimum 80%
- Integration tests for all API endpoints
- Performance tests for critical paths

## Deployment

TODO: Specify deployment requirements:
- Target environment
- CI/CD requirements
- Monitoring and alerting

## Success Criteria

1. TODO: All functional requirements implemented
2. TODO: Test coverage meets targets
3. TODO: Performance benchmarks achieved
4. TODO: Documentation complete

## Timeline and Phases

TODO: Define project phases if needed, or let Claude Code Builder determine optimal phases.
"""