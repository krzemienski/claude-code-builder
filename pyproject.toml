[tool.poetry]
name = "claude-code-builder"
version = "1.0.0"
description = "AI-powered Python CLI tool that automates the complete software development lifecycle"
authors = ["Claude Code Builder Team"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/claude-code-builder/claude-code-builder"
repository = "https://github.com/claude-code-builder/claude-code-builder"
documentation = "https://claude-code-builder.readthedocs.io"
keywords = ["ai", "automation", "cli", "development", "claude", "anthropic"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]
packages = [{include = "claude_code_builder", from = "src"}]

[tool.poetry.scripts]
claude-code-builder = "claude_code_builder.cli.main:cli"

[tool.poetry.dependencies]
python = "^3.11"
anthropic = "^0.34.0"
click = "^8.1.7"
rich = "^13.7.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
jinja2 = "^3.1.3"
gitpython = "^3.1.40"
aiofiles = "^23.2.1"
httpx = "^0.25.2"
python-dotenv = "^1.0.0"
structlog = "^24.1.0"
watchdog = "^4.0.0"
tiktoken = "^0.5.2"
xxhash = "^3.4.1"
humanize = "^4.9.0"
tabulate = "^0.9.0"
tomli = "^2.0.1"
tomli-w = "^1.0.0"

[tool.poetry.group.dev.dependencies]
black = "^24.3.0"
ruff = "^0.1.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
ipython = "^8.20.0"
ipdb = "^0.13.13"
types-aiofiles = "^23.2.0"
types-tabulate = "^0.9.0"
types-python-dateutil = "^2.8.19"

[build-system]
requires = ["poetry-core>=1.7.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "COM",  # flake8-commas
    "PTH",  # flake8-use-pathlib
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip without explicit strict parameter
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "ARG", "FBT"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
follow_imports = "normal"
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.coverage.run]
source = ["src/claude_code_builder"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = "-ra -q --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]